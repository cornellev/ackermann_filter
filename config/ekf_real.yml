# General settings for the Kalman Filter node output
odometry_settings:
  publish_rate: 100 # Publish rate of the filter in Hz

  main_model: "ackermann" # Main model to use for the filter

  topic: "/odometry/meow" # Topic to publish the odometry data
  base_link: "base_link" # Base link frame ID
  odom_frame: "odom" # Odometry frame ID

# Define the sensors used by the node
sensors:
  witmotion_imu:
    type: "IMU" # Sensor type (IMU, GPS, etc.)
    topic: "/imu" # Topic to subscribe to
    frame_id: "imu_frame" # Frame ID for the sensor data
    state: ["d2_x", "d2_y", "yaw"] # State variables to use from the sensor data
    covariance_multiplier: 1.0 # Multiplier to multiply message covariance by
    estimator_models: [ackermann] # List of strings representing models to use for the sensor data by name

  encoder_odometry:
    type: "RAW" # Sensor type (IMU, GPS, etc.)
    topic: "/sensor_collect" # Topic to subscribe to
    frame_id: "odom_frame" # Frame ID for the sensor data

    state: ["d_x", "tau"] # State variables to use from the sensor data
    covariance_multiplier: 2.0 # Multiplier to multiply message covariance by
    estimator_models: [ackermann] # List of strings representing models to use for the sensor data by name

# Define update models with their parameters
update_models:
  ackermann:
    type: "ACKERMANN" # Model type (ACKERMANN, CARTESIAN, etc.)
    state: ["x", "y", "d_x", "d_y", "yaw", "tau"] # State variables to use from the model in updates
    estimator_models: []
  # cartesian:
  #   type: "CARTESIAN" # Model type (ACKERMANN, CARTESIAN, etc.)
  #   state: ["x", "y", "d_x", "d_y", "yaw", "d_yaw"] # State variables to use from the model in updates
  #   estimator_models: []
